{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 404,
   "metadata": {},
   "outputs": [],
   "source": [
    "## For an AR, generate a list of the account numbers that are on a freelancer's dashboard\n",
    "# This script can be used during an Account Review to ideintify which of the account numbers in the account\n",
    "# are currently on a freelancer's dashboard. Anybody working on the AR would be able to ping a freelancer to\n",
    "# prioritize these accounts or simply remove these accounts from the AR at the beginning, \n",
    "# eliminating the time and effort required of the individual to update the account themselves\n",
    "\n",
    "import selenium\n",
    "import csv\n",
    "import time\n",
    "from selenium import webdriver\n",
    "\n",
    "## Downloading freelancer dashboards\n",
    "# Using Chrome to access web\n",
    "driver = webdriver.Chrome()\n",
    "\n",
    "# Open the website\n",
    "driver.get('https://www.wegowise.com/login')\n",
    "\n",
    "# Select id box\n",
    "time.sleep(2)\n",
    "id_box = driver.find_element_by_id('username')\n",
    "id_box.send_keys('kojiro')\n",
    "\n",
    "time.sleep(1)\n",
    "\n",
    "# Find password box\n",
    "pass_box = driver.find_element_by_id('password')\n",
    "\n",
    "# Send password\n",
    "pass_box.send_keys('Koj!rom1yagawa')\n",
    "\n",
    "# Find login button\n",
    "time.sleep(1)\n",
    "login_button = driver.find_element_by_name('go_raquo__button')\n",
    "\n",
    "# Click login\n",
    "login_button.click()\n",
    "\n",
    "freelancer_list = [\"aladao\", \"cching\", \"crollins\",\"cjones\",\"eoracion\",\"sosmanollaj\",\n",
    "                   \"mjuma\", \"rasentista\", \"lmaina\", \"abernardo\",\"tmaniulit\", \"rsantos\", \"jsmolinski\", \"rfoster\"]\n",
    "\n",
    "k = 0\n",
    "\n",
    "for i in freelancer_list:\n",
    "    j = freelancer_list[k]\n",
    "    #Search freelancer\n",
    "    time.sleep(3)\n",
    "    search_box = driver.find_element_by_id(\"query\")\n",
    "    search_box.send_keys(j)\n",
    "    search_button = driver.find_element_by_name(\"search_button\")\n",
    "    search_button.click()\n",
    "\n",
    "    # Click on freelancer name\n",
    "    time.sleep(1)\n",
    "    freelancer = driver.find_element_by_link_text(j)\n",
    "    freelancer.click()\n",
    "\n",
    "    # Click on download button\n",
    "    time.sleep(1)\n",
    "    dl_button = driver.find_element_by_class_name('icon-disk')\n",
    "    dl_button.click()\n",
    "    \n",
    "    # Return to search page\n",
    "    time.sleep(1)\n",
    "    driver.back()\n",
    "    time.sleep(1)\n",
    "    driver.back()\n",
    "    k = k+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 406,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Joining all dashboards\n",
    "import pandas as pd\n",
    "\n",
    "aladao = pd.read_csv('/Users/kojiroso/Downloads/data_entry_aladao.csv')\n",
    "aladao = aladao.assign(freelancer_id='aladao')\n",
    "\n",
    "cching = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_cching.csv\")\n",
    "cching = cching.assign(freelancer_id='cching')\n",
    "\n",
    "crollins = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_crollins.csv\")\n",
    "crollins = crollins.assign(freelancer_id='crollins')\n",
    "\n",
    "# dfrancis = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_dfrancis.csv\")\n",
    "# dfrancis = dfrancis.assign(freelancer_id='dfrancis')\n",
    "\n",
    "cjones = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_cjones.csv\")\n",
    "cjones = cjones.assign(freelancer_id='cjones')\n",
    "\n",
    "eoracion = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_eoracion.csv\")\n",
    "eoracion = eoracion.assign(freelancer_id='eoracion')\n",
    "\n",
    "sosmanollaj = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_sosmanollaj.csv\")\n",
    "sosmanollaj = sosmanollaj.assign(freelancer_id='sosmanollaj')\n",
    "\n",
    "mjuma = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_mjuma.csv\")\n",
    "mjuma = mjuma.assign(freelancer_id='mjuma')\n",
    "\n",
    "rasentista = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_rasentista.csv\")\n",
    "rasentista = rasentista.assign(freelancer_id='rasentista')\n",
    "\n",
    "lmaina = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_lmaina.csv\")\n",
    "lmaina = lmaina.assign(freelancer_id ='lmaina')\n",
    "\n",
    "abernardo = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_abernardo.csv\")\n",
    "abernardo = abernardo.assign(freelancer_id = 'abernardo')\n",
    "\n",
    "tmaniulit = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_tmaniulit.csv\")\n",
    "tmaniulit = tmaniulit.assign(freelancer_id = 'tmaniulit')\n",
    "\n",
    "rsantos = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_rsantos.csv\")\n",
    "rsantos = rsantos.assign(freelancer_id = 'rsantos')\n",
    "\n",
    "jsmolinski = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_jsmolinski.csv\")\n",
    "jsmolinski = jsmolinski.assign(freelancer_id = 'jsmolinski')\n",
    "\n",
    "rfoster = pd.read_csv(\"/Users/kojiroso/Downloads/data_entry_rfoster.csv\")\n",
    "rfoster = rfoster.assign(freelancer_id = 'rfoster')\n",
    "\n",
    "freelancers = pd.concat([aladao, cching, crollins, cjones, eoracion, sosmanollaj, \n",
    "           mjuma, rasentista, lmaina, abernardo, tmaniulit, rsantos, jsmolinski, rfoster])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Number of accounts on freelancers' dashboards that are 'out-of-date' i.e. Est Next Datapoint is in the past\n",
    "## This includes account numbers where Est Next Datapoint is blank\n",
    "\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "today = datetime.today().strftime('%Y-%m-%d')\n",
    "\n",
    "## Total number of accounts by freelancer\n",
    "\n",
    "# Filter data so we're only looking at accounts with an Est Next Datapoint in the past/ with blank Est Next Datapoints\n",
    "fl_filter = freelancers[(freelancers['Est Next Datapoint'] < today) | (freelancers['Est Next Datapoint'].isnull())]\n",
    "\n",
    "# Count number of out-of-date meters by freelancer\n",
    "old_meter_count = fl_filter.groupby(['freelancer_id','Utility Company'])['Account Number'].count().reset_index(name='old_meters')\n",
    "\n",
    "# Sort by freelancer with the most out-of-date meters\n",
    "old_meter_count = old_meter_count.sort_values(by = ['freelancer_id', 'old_meters'], ascending = False)\n",
    "\n",
    "# Export as excel file\n",
    "old_meter_count.to_excel(\"old_meter_count.xlsx\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/kojiroso/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  import sys\n",
      "/Users/kojiroso/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  # Remove the CWD from sys.path while we load stuff.\n"
     ]
    }
   ],
   "source": [
    "## Total number of accounts by freelancer, by month\n",
    "\n",
    "# Number of accounts by freelancer by date \n",
    "fl_filter.groupby(['freelancer_id','Est Next Datapoint'])['Account Number'].count()\n",
    "\n",
    "# Convert dates to datetime data type\n",
    "fl_filter['Est Next Datapoint'] = pd.to_datetime(fl_filter['Est Next Datapoint'])\n",
    "\n",
    "# Convert dates to year-month format\n",
    "fl_filter['month_year'] = fl_filter['Est Next Datapoint'].dt.to_period('M')\n",
    "\n",
    "# Total number of out-of-date meters by freelancer by month\n",
    "old_meter_count_by_month = fl_filter.groupby(['freelancer_id','month_year'])['Account Number'].count().reset_index(name='no_of_meters')\n",
    "\n",
    "old_meter_count_by_month = old_meter_count_by_month.pivot(index='freelancer_id', columns = 'month_year')['no_of_meters']\n",
    "\n",
    "# Export as excel file\n",
    "old_meter_count_by_month.to_excel(\"old_meter_count_by_month.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
